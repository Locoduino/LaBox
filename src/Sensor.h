/**********************************************************************

Sensor.h
COPYRIGHT (c) 2013-2016 Gregg E. Berman

Part of DCC++ BASE STATION for the Arduino

**********************************************************************/

#ifndef Sensor_h
#define Sensor_h

#include "Arduino.h"

#include "DCCpp.h"
#ifdef USE_SENSOR

#define  SENSOR_DECAY  0.03

/** Data associated to each Sensor.*/
struct SensorData {
  int snum;		/**< the numeric ID (0-32767) of the sensor.*/
  byte pin;		/**< The arduino pin number the sensor is connected to.*/
  byte pullUp;	/**< 1 = use internal pull-up resistor for pin, 0 = don't use internal pull-up resistor for pin.*/
};

/**	\addtogroup commandsGroup
	CREATES A NEW SENSO%R
	---------------------

	<b>
	\verbatim
	<S ID PIN PULLUP>
	\endverbatim
	</b>

	creates a new sensor ID, with specified PIN and PULLUP
	if sensor ID already exists, it is updated with specified PIN and PULLUP

	- <b>ID</b>: the numeric ID (0-32767) of the sensor
	- <b>PIN</b>: the arduino pin number the sensor is connected to
	- <b>PULLUP</b>: PULLUP: 1=use internal pull-up resistor for PIN, 0=don't use internal pull-up resistor for PIN

	returns: <b>\<O\></b> if successful and <b>\<X\></b> if unsuccessful (e.g. out of memory)
*/

/**	\addtogroup commandsGroup
	DELETES AN EXISTING SENSO%R
	---------------------------

	<b>
	\verbatim
	<S ID>
	\endverbatim
	</b>

	deletes definition of sensor ID.

	- <b>ID</b>: the numeric ID (0-32767) of the sensor to check

	returns: <b>\<O\></b> if successful and <b>\<X\></b> if unsuccessful (e.g. ID does not exist)
*/

/**	\addtogroup commandsGroup
	LISTS ALL DEFINED SENSORS
	-------------------------

	<b>
	\verbatim
	<S>
	\endverbatim
	</b>

	lists all defined sensors

	returns: <b>\<Q ID PIN PULLUP\></b> for each defined sensor or <b>\<X\></b> if no sensors defined where

	- <b>ID</b>: the numeric ID (0-32767) of the sensor
	- <b>PIN</b>: the arduino pin number the sensor is connected to
	- <b>PULLUP</b>: PULLUP: 1=use internal pull-up resistor for PIN, 0=don't use internal pull-up resistor for PIN
*/

/**DCC++ BASE STATION supports Sensor inputs that can be connected to any Arduino Pin
not in use by this program.  Sensors can be of any type (infrared, magnetic, mechanical...).
The only requirement is that when "activated" the Sensor must force the specified Arduino
Pin LOW (i.e. to ground), and when not activated, this Pin should remain HIGH (e.g. 5V),
or be allowed to float HIGH if use of the Arduino Pin's internal pull-up resistor is specified.
Be careful, don't use Arduino's internal pull-up resistors for external infrared sensors:
each sensor must have its own 1K external pull-up resistor.

To ensure proper voltage levels, some part of the Sensor circuitry
MUST be tied back to the same ground as used by the Arduino.

The Sensor code below utilizes exponential smoothing to "de-bounce" spikes generated by
mechanical switches and transistors.  This avoids the need to create smoothing circuitry
for each sensor. You may need to change these parameters through trial and error for your specific sensors.

To have this sketch monitor one or more Arduino pins for sensor triggers, first define/edit/delete
sensor definitions using one on the variation of the "S" command.

Once all sensors have been properly defined, use the <b>\<E\></b> command to store their definitions to EEPROM.
If you later make edits/additions/deletions to the sensor definitions, you must invoke the <b>\<E\></b> command if you want those
new definitions updated in the EEPROM.  You can also clear everything stored in the EEPROM by invoking the <b>\<e\></b> command.

All sensors defined as per above are repeatedly and sequentially checked within the main loop of this sketch.
If a Sensor Pin is found to have transitioned from one state to another, one of the following serial messages are generated:

- <b>\<Q ID\></b> for transition of Sensor ID from HIGH state to LOW state (i.e. the sensor is triggered)
- <b>\<q ID\></b> for transition of Sensor ID from LOW state to HIGH state (i.e. the sensor is no longer triggered)


Depending on whether the physical sensor is acting as an "event-trigger" or a "detection-sensor," you may
decide to ignore the <b>\<q ID\></b> return and only react to <b>\<Q ID\></b> triggers.
*/
struct Sensor{
  static Sensor *firstSensor;	/**< Address of the first object of this class. NULL means empty list of sensors. Do not change it !*/
  SensorData data;				/**< Data associated to this output.*/
  boolean active;				/**< True if this sensor is active.*/
  float signal;					/**< Last read value of this sensor.*/
  Sensor *nextSensor;			/**< Address of the next object of this class. NULL means end of the list of sensors. Do not change it !*/

  /** Initialize the sensor created by regular C++ instantiation.
  @param snum The numeric ID (0-32767) of the sensor.
  @param pin The arduino pin number to use for the sensor.
  @param pullUp 1 = use internal pull-up resistor for pin, 0 = don't use internal pull-up resistor for pin.
  @remark Should not be used in command line mode.
  */
  void begin(int snum, int pin, int pullUp);
  /** Force the sensor values created by command line.
  @param snum The numeric ID (0-32767) of the sensor.
  @param pin The arduino pin number to use for the sensor.
  @param pullUp 1 = use internal pull-up resistor for pin, 0 = don't use internal pull-up resistor for pin.
  @remark Should not be used in C++ mode.
  */
  void set(int snum, int pin, int pullUp);
  /** Get a particular sensor.
  @param snum The numeric ID (0-32767) of the sensor.
  @return The found sensor or NULL if not found.
  @remark Only available when USE_EEPROM or USE_TEXTCOMMAND is defined.
  */
  static Sensor* get(int snum);
  /** Removes a particular sensor.
  @param snum	The numeric ID (0-32767) of the sensor.
  @remark Only available when USE_EEPROM or USE_TEXTCOMMAND is defined.
  */
  static void remove(int snum);
  /** Get the total number of sensors.
  @return Number of sensors.
  @remark Only available when USE_EEPROM or USE_TEXTCOMMAND is defined.
  */
  static int count();
  /** Checks if the associated pin is LOW or HIGH and update the 'signal' field with a pondered value.
  */
  static void check();
  /** Checks if the sensor is activated or not.
  @return True if the sensor is activated. Otherwise false (of course...).
  */
  boolean isActive() { return this->active; }

#ifdef DCCPP_PRINT_DCCPP
  /** Show the content of all sensors.
  @remark Only available when DCCPP_PRINT_DCCPP is defined.
  */
  static void show();
  /** Show the current values of all sensors.
  @remark Only available when DCCPP_PRINT_DCCPP is defined.
  */
  static void status();
#endif

#ifdef USE_EEPROM
  /** Load the content of this sensor from EEPROM.
  @remark Only available when USE_EEPROM is defined.
  */
  static void load();
  /** Store the content of this sensor in EEPROM.
  @remark Only available when USE_EEPROM is defined.
  */
  static void store();
#endif

#if defined(USE_TEXTCOMMAND)
  /** Do command according to the given command string.
  @param c string to interpret... See syntax in class description.
  @remark Only available when USE_TEXTCOMMAND is defined.
  */
  static bool parse(char *c);
  /** Creates a new sensor in the list..
  @param snum The numeric ID (0-32767) of the sensor.
  @param pin The arduino pin number to use for the sensor.
  @param pullUp 1 = use internal pull-up resistor for pin, 0 = don't use internal pull-up resistor for pin.
  @remark Should not be used in C++ mode.
  @remark Only available when USE_TEXTCOMMAND is defined.
  */
  static Sensor *create(int snum, int pin, int pullUp);
#endif
}; // Sensor

#endif

#endif
